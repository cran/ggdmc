// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// r_fastdm
Rcpp::List r_fastdm(unsigned int num_values, std::vector<double> params, double precision, bool stop_on_error);
RcppExport SEXP _ggdmc_r_fastdm(SEXP num_valuesSEXP, SEXP paramsSEXP, SEXP precisionSEXP, SEXP stop_on_errorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type num_values(num_valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_on_error(stop_on_errorSEXP);
    rcpp_result_gen = Rcpp::wrap(r_fastdm(num_values, params, precision, stop_on_error));
    return rcpp_result_gen;
END_RCPP
}
// likelihood
Rcpp::NumericVector likelihood(Rcpp::NumericVector p_vector_r, List data, double min_lik);
RcppExport SEXP _ggdmc_likelihood(SEXP p_vector_rSEXP, SEXP dataSEXP, SEXP min_likSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p_vector_r(p_vector_rSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type min_lik(min_likSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood(p_vector_r, data, min_lik));
    return rcpp_result_gen;
END_RCPP
}
// p_df
Rcpp::NumericMatrix p_df(Rcpp::NumericVector p_vector_r, std::string cell, std::string mtype, std::vector<std::string> pnames, std::vector<std::string> parnames, std::vector<std::string> dim0, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<double> allpar, Rcpp::NumericVector model, Rcpp::NumericVector isr1, Rcpp::NumericMatrix n1idx, bool n1order);
RcppExport SEXP _ggdmc_p_df(SEXP p_vector_rSEXP, SEXP cellSEXP, SEXP mtypeSEXP, SEXP pnamesSEXP, SEXP parnamesSEXP, SEXP dim0SEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP allparSEXP, SEXP modelSEXP, SEXP isr1SEXP, SEXP n1idxSEXP, SEXP n1orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p_vector_r(p_vector_rSEXP);
    Rcpp::traits::input_parameter< std::string >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< std::string >::type mtype(mtypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< bool >::type n1order(n1orderSEXP);
    rcpp_result_gen = Rcpp::wrap(p_df(p_vector_r, cell, mtype, pnames, parnames, dim0, dim1, dim2, allpar, model, isr1, n1idx, n1order));
    return rcpp_result_gen;
END_RCPP
}
// rlba_norm
Rcpp::NumericMatrix rlba_norm(unsigned int n, const Rcpp::NumericVector A, const Rcpp::NumericVector b, const Rcpp::NumericVector mean_v, const Rcpp::NumericVector sd_v, const Rcpp::NumericVector t0, const Rcpp::NumericVector st0, bool posdrift);
RcppExport SEXP _ggdmc_rlba_norm(SEXP nSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP st0SEXP, SEXP posdriftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type st0(st0SEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    rcpp_result_gen = Rcpp::wrap(rlba_norm(n, A, b, mean_v, sd_v, t0, st0, posdrift));
    return rcpp_result_gen;
END_RCPP
}
// rprior_mat
NumericMatrix rprior_mat(List prior, unsigned int n);
RcppExport SEXP _ggdmc_rprior_mat(SEXP priorSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rprior_mat(prior, n));
    return rcpp_result_gen;
END_RCPP
}
// init_mcmc
List init_mcmc(List data_or_samples, List prior, unsigned int nchain, unsigned int nmc, unsigned int thin, unsigned int report, double rp, double gammamult, double pm_Hu, double pm_BT, bool block, bool add, bool is_old);
RcppExport SEXP _ggdmc_init_mcmc(SEXP data_or_samplesSEXP, SEXP priorSEXP, SEXP nchainSEXP, SEXP nmcSEXP, SEXP thinSEXP, SEXP reportSEXP, SEXP rpSEXP, SEXP gammamultSEXP, SEXP pm_HuSEXP, SEXP pm_BTSEXP, SEXP blockSEXP, SEXP addSEXP, SEXP is_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data_or_samples(data_or_samplesSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nchain(nchainSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type report(reportSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< double >::type gammamult(gammamultSEXP);
    Rcpp::traits::input_parameter< double >::type pm_Hu(pm_HuSEXP);
    Rcpp::traits::input_parameter< double >::type pm_BT(pm_BTSEXP);
    Rcpp::traits::input_parameter< bool >::type block(blockSEXP);
    Rcpp::traits::input_parameter< bool >::type add(addSEXP);
    Rcpp::traits::input_parameter< bool >::type is_old(is_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(init_mcmc(data_or_samples, prior, nchain, nmc, thin, report, rp, gammamult, pm_Hu, pm_BT, block, add, is_old));
    return rcpp_result_gen;
END_RCPP
}
// init_hier
List init_hier(List data_or_samples, List prior, List lprior, List sprior, unsigned int nchain, unsigned int nmc, unsigned int thin, unsigned int report, double rp, double gammamult, double pm_Hu, double pm_BT, bool block, bool add, bool is_old);
RcppExport SEXP _ggdmc_init_hier(SEXP data_or_samplesSEXP, SEXP priorSEXP, SEXP lpriorSEXP, SEXP spriorSEXP, SEXP nchainSEXP, SEXP nmcSEXP, SEXP thinSEXP, SEXP reportSEXP, SEXP rpSEXP, SEXP gammamultSEXP, SEXP pm_HuSEXP, SEXP pm_BTSEXP, SEXP blockSEXP, SEXP addSEXP, SEXP is_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data_or_samples(data_or_samplesSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List >::type lprior(lpriorSEXP);
    Rcpp::traits::input_parameter< List >::type sprior(spriorSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nchain(nchainSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type report(reportSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< double >::type gammamult(gammamultSEXP);
    Rcpp::traits::input_parameter< double >::type pm_Hu(pm_HuSEXP);
    Rcpp::traits::input_parameter< double >::type pm_BT(pm_BTSEXP);
    Rcpp::traits::input_parameter< bool >::type block(blockSEXP);
    Rcpp::traits::input_parameter< bool >::type add(addSEXP);
    Rcpp::traits::input_parameter< bool >::type is_old(is_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(init_hier(data_or_samples, prior, lprior, sprior, nchain, nmc, thin, report, rp, gammamult, pm_Hu, pm_BT, block, add, is_old));
    return rcpp_result_gen;
END_RCPP
}
// dtnorm
std::vector<double> dtnorm(std::vector<double> x, double p1, double p2, double lower, double upper, bool lg);
RcppExport SEXP _ggdmc_dtnorm(SEXP xSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dtnorm(x, p1, p2, lower, upper, lg));
    return rcpp_result_gen;
END_RCPP
}
// rtnorm
std::vector<double> rtnorm(unsigned int n, double p1, double p2, double lower, double upper);
RcppExport SEXP _ggdmc_rtnorm(SEXP nSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtnorm(n, p1, p2, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// ptnorm
std::vector<double> ptnorm(std::vector<double> q, double p1, double p2, double lower, double upper, bool lt, bool lg);
RcppExport SEXP _ggdmc_ptnorm(SEXP qSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP ltSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< bool >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(ptnorm(q, p1, p2, lower, upper, lt, lg));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ggdmc_r_fastdm", (DL_FUNC) &_ggdmc_r_fastdm, 4},
    {"_ggdmc_likelihood", (DL_FUNC) &_ggdmc_likelihood, 3},
    {"_ggdmc_p_df", (DL_FUNC) &_ggdmc_p_df, 13},
    {"_ggdmc_rlba_norm", (DL_FUNC) &_ggdmc_rlba_norm, 8},
    {"_ggdmc_rprior_mat", (DL_FUNC) &_ggdmc_rprior_mat, 2},
    {"_ggdmc_init_mcmc", (DL_FUNC) &_ggdmc_init_mcmc, 13},
    {"_ggdmc_init_hier", (DL_FUNC) &_ggdmc_init_hier, 15},
    {"_ggdmc_dtnorm", (DL_FUNC) &_ggdmc_dtnorm, 6},
    {"_ggdmc_rtnorm", (DL_FUNC) &_ggdmc_rtnorm, 5},
    {"_ggdmc_ptnorm", (DL_FUNC) &_ggdmc_ptnorm, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_ggdmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
