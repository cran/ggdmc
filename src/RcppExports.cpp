// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// pnormP
arma::vec pnormP(arma::vec x, double mean, double sd, double lt, double lg);
RcppExport SEXP _ggdmc_pnormP(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP ltSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< double >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(pnormP(x, mean, sd, lt, lg));
    return rcpp_result_gen;
END_RCPP
}
// dnormP
arma::vec dnormP(arma::vec x, double mean, double sd, double lg);
RcppExport SEXP _ggdmc_dnormP(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dnormP(x, mean, sd, lg));
    return rcpp_result_gen;
END_RCPP
}
// remove_t0
arma::vec remove_t0(arma::vec x, double t0);
RcppExport SEXP _ggdmc_remove_t0(SEXP xSEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    rcpp_result_gen = Rcpp::wrap(remove_t0(x, t0));
    return rcpp_result_gen;
END_RCPP
}
// GetTime2Finish
arma::mat GetTime2Finish(arma::mat drifts, arma::vec A, arma::vec b, arma::vec t0, arma::vec st0, unsigned int nmean_v, unsigned int n);
RcppExport SEXP _ggdmc_GetTime2Finish(SEXP driftsSEXP, SEXP ASEXP, SEXP bSEXP, SEXP t0SEXP, SEXP st0SEXP, SEXP nmean_vSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type drifts(driftsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st0(st0SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nmean_v(nmean_vSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTime2Finish(drifts, A, b, t0, st0, nmean_v, n));
    return rcpp_result_gen;
END_RCPP
}
// fptcdf
arma::vec fptcdf(arma::vec rt, double A, double b, double mean_v, double sd_v, double t0, bool posdrift);
RcppExport SEXP _ggdmc_fptcdf(SEXP rtSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP posdriftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< double >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    rcpp_result_gen = Rcpp::wrap(fptcdf(rt, A, b, mean_v, sd_v, t0, posdrift));
    return rcpp_result_gen;
END_RCPP
}
// fptpdf
arma::vec fptpdf(arma::vec rt, double A, double b, double mean_v, double sd_v, double t0, bool posdrift);
RcppExport SEXP _ggdmc_fptpdf(SEXP rtSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP posdriftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< double >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    rcpp_result_gen = Rcpp::wrap(fptpdf(rt, A, b, mean_v, sd_v, t0, posdrift));
    return rcpp_result_gen;
END_RCPP
}
// n1PDFfixedt0
arma::vec n1PDFfixedt0(arma::vec rt, arma::vec A, arma::vec b, arma::vec mean_v, arma::vec sd_v, arma::vec t0, bool posdrift);
RcppExport SEXP _ggdmc_n1PDFfixedt0(SEXP rtSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP posdriftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDFfixedt0(rt, A, b, mean_v, sd_v, t0, posdrift));
    return rcpp_result_gen;
END_RCPP
}
// n1PDFfixedt0_pda
arma::vec n1PDFfixedt0_pda(arma::vec rt, double A, double b, arma::mat mean_v, arma::vec sd_v, double t0, unsigned int n, double h, bool debug);
RcppExport SEXP _ggdmc_n1PDFfixedt0_pda(SEXP rtSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP nSEXP, SEXP hSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDFfixedt0_pda(rt, A, b, mean_v, sd_v, t0, n, h, debug));
    return rcpp_result_gen;
END_RCPP
}
// n1PDF_cnorm
arma::vec n1PDF_cnorm(arma::vec x, arma::vec A, arma::vec b, arma::vec t0, arma::vec mean_v, arma::vec sd_v, arma::vec st0, double corr_v, unsigned int n, double h, bool debug);
RcppExport SEXP _ggdmc_n1PDF_cnorm(SEXP xSEXP, SEXP ASEXP, SEXP bSEXP, SEXP t0SEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP st0SEXP, SEXP corr_vSEXP, SEXP nSEXP, SEXP hSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st0(st0SEXP);
    Rcpp::traits::input_parameter< double >::type corr_v(corr_vSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDF_cnorm(x, A, b, t0, mean_v, sd_v, st0, corr_v, n, h, debug));
    return rcpp_result_gen;
END_RCPP
}
// n1PDF_gpu
NumericVector n1PDF_gpu(arma::vec x, double A, double b, arma::vec mean_v, arma::vec sd_v, double t0, int n, unsigned int nthread, unsigned int gpuid, double bw, bool debug);
RcppExport SEXP _ggdmc_n1PDF_gpu(SEXP xSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP nSEXP, SEXP nthreadSEXP, SEXP gpuidSEXP, SEXP bwSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nthread(nthreadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type gpuid(gpuidSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDF_gpu(x, A, b, mean_v, sd_v, t0, n, nthread, gpuid, bw, debug));
    return rcpp_result_gen;
END_RCPP
}
// n1PDF_plba0_gpu
NumericVector n1PDF_plba0_gpu(arma::vec x, double A, double b, arma::vec mean_v, arma::vec sd_v, double t0, arma::vec mean_w, double rD, double swt, unsigned int n, unsigned int nthread, unsigned int gpuid, double bw, bool debug);
RcppExport SEXP _ggdmc_n1PDF_plba0_gpu(SEXP xSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP mean_wSEXP, SEXP rDSEXP, SEXP swtSEXP, SEXP nSEXP, SEXP nthreadSEXP, SEXP gpuidSEXP, SEXP bwSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_w(mean_wSEXP);
    Rcpp::traits::input_parameter< double >::type rD(rDSEXP);
    Rcpp::traits::input_parameter< double >::type swt(swtSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nthread(nthreadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type gpuid(gpuidSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDF_plba0_gpu(x, A, b, mean_v, sd_v, t0, mean_w, rD, swt, n, nthread, gpuid, bw, debug));
    return rcpp_result_gen;
END_RCPP
}
// n1PDF_plba1_gpu
NumericVector n1PDF_plba1_gpu(arma::vec x, double A, double b, arma::vec mean_v, arma::vec sd_v, double t0, arma::vec mean_w, double rD, double swt, unsigned int n, unsigned int nthread, unsigned int gpuid, double bw, bool debug);
RcppExport SEXP _ggdmc_n1PDF_plba1_gpu(SEXP xSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP mean_wSEXP, SEXP rDSEXP, SEXP swtSEXP, SEXP nSEXP, SEXP nthreadSEXP, SEXP gpuidSEXP, SEXP bwSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_w(mean_wSEXP);
    Rcpp::traits::input_parameter< double >::type rD(rDSEXP);
    Rcpp::traits::input_parameter< double >::type swt(swtSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nthread(nthreadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type gpuid(gpuidSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDF_plba1_gpu(x, A, b, mean_v, sd_v, t0, mean_w, rD, swt, n, nthread, gpuid, bw, debug));
    return rcpp_result_gen;
END_RCPP
}
// make_r
arma::mat make_r(arma::mat drifts, arma::vec A, arma::vec b, arma::vec t0, arma::vec st0, bool return_ttf, bool debug);
RcppExport SEXP _ggdmc_make_r(SEXP driftsSEXP, SEXP ASEXP, SEXP bSEXP, SEXP t0SEXP, SEXP st0SEXP, SEXP return_ttfSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type drifts(driftsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st0(st0SEXP);
    Rcpp::traits::input_parameter< bool >::type return_ttf(return_ttfSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(make_r(drifts, A, b, t0, st0, return_ttf, debug));
    return rcpp_result_gen;
END_RCPP
}
// make_v
arma::mat make_v(unsigned int n, arma::mat mean_v, arma::vec sd_v, bool posdrift);
RcppExport SEXP _ggdmc_make_v(SEXP nSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP posdriftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    rcpp_result_gen = Rcpp::wrap(make_v(n, mean_v, sd_v, posdrift));
    return rcpp_result_gen;
END_RCPP
}
// rlba_norm
arma::mat rlba_norm(unsigned int n, arma::vec A, arma::vec b, arma::mat mean_v, arma::vec sd_v, arma::vec t0, arma::vec st0, bool posdrift, bool return_ttf, bool debug);
RcppExport SEXP _ggdmc_rlba_norm(SEXP nSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP st0SEXP, SEXP posdriftSEXP, SEXP return_ttfSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st0(st0SEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    Rcpp::traits::input_parameter< bool >::type return_ttf(return_ttfSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rlba_norm(n, A, b, mean_v, sd_v, t0, st0, posdrift, return_ttf, debug));
    return rcpp_result_gen;
END_RCPP
}
// make_sigma
arma::mat make_sigma(unsigned int nv, arma::vec sd_v, double corr_v);
RcppExport SEXP _ggdmc_make_sigma(SEXP nvSEXP, SEXP sd_vSEXP, SEXP corr_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nv(nvSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type corr_v(corr_vSEXP);
    rcpp_result_gen = Rcpp::wrap(make_sigma(nv, sd_v, corr_v));
    return rcpp_result_gen;
END_RCPP
}
// g_minus
double g_minus(std::vector<double> pVec);
RcppExport SEXP _ggdmc_g_minus(SEXP pVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pVec(pVecSEXP);
    rcpp_result_gen = Rcpp::wrap(g_minus(pVec));
    return rcpp_result_gen;
END_RCPP
}
// g_plus
double g_plus(std::vector<double> pVec);
RcppExport SEXP _ggdmc_g_plus(SEXP pVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pVec(pVecSEXP);
    rcpp_result_gen = Rcpp::wrap(g_plus(pVec));
    return rcpp_result_gen;
END_RCPP
}
// FlipResponse_norm
arma::mat FlipResponse_norm(arma::mat parmat, arma::umat n1mat, std::vector<std::string> dim1, std::vector<std::string> dim3, std::vector<std::string> parnames, std::string cell);
RcppExport SEXP _ggdmc_FlipResponse_norm(SEXP parmatSEXP, SEXP n1matSEXP, SEXP dim1SEXP, SEXP dim3SEXP, SEXP parnamesSEXP, SEXP cellSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type parmat(parmatSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1mat(n1matSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< std::string >::type cell(cellSEXP);
    rcpp_result_gen = Rcpp::wrap(FlipResponse_norm(parmat, n1mat, dim1, dim3, parnames, cell));
    return rcpp_result_gen;
END_RCPP
}
// checkddm2
bool checkddm2(std::vector<double> pVec);
RcppExport SEXP _ggdmc_checkddm2(SEXP pVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pVec(pVecSEXP);
    rcpp_result_gen = Rcpp::wrap(checkddm2(pVec));
    return rcpp_result_gen;
END_RCPP
}
// p_df
arma::mat p_df(arma::vec pVec, std::string cell, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::uvec isr1, arma::umat n1idx, bool n1order);
RcppExport SEXP _ggdmc_p_df(SEXP pVecSEXP, SEXP cellSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP isr1SEXP, SEXP n1idxSEXP, SEXP n1orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::string >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< bool >::type n1order(n1orderSEXP);
    rcpp_result_gen = Rcpp::wrap(p_df(pVec, cell, pnames, allpar, parnames, model, type, dim1, dim2, dim3, isr1, n1idx, n1order));
    return rcpp_result_gen;
END_RCPP
}
// getbounds
arma::uvec getbounds(List data);
RcppExport SEXP _ggdmc_getbounds(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(getbounds(data));
    return rcpp_result_gen;
END_RCPP
}
// density_rd
arma::vec density_rd(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, double precision);
RcppExport SEXP _ggdmc_density_rd(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(density_rd(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, precision));
    return rcpp_result_gen;
END_RCPP
}
// density_norm
arma::vec density_norm(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, bool posdrift);
RcppExport SEXP _ggdmc_density_norm(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP posdriftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    rcpp_result_gen = Rcpp::wrap(density_norm(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, posdrift));
    return rcpp_result_gen;
END_RCPP
}
// density_cnorm_pda
arma::vec density_cnorm_pda(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, unsigned int nsim, double bw, bool debug);
RcppExport SEXP _ggdmc_density_cnorm_pda(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP nsimSEXP, SEXP bwSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(density_cnorm_pda(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, nsim, bw, debug));
    return rcpp_result_gen;
END_RCPP
}
// density_norm_pda
arma::vec density_norm_pda(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, unsigned int npda, double bw, bool debug);
RcppExport SEXP _ggdmc_density_norm_pda(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP npdaSEXP, SEXP bwSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type npda(npdaSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(density_norm_pda(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, npda, bw, debug));
    return rcpp_result_gen;
END_RCPP
}
// density_norm_gpu
arma::vec density_norm_gpu(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, unsigned int nsim, double bw, unsigned int gpuid, unsigned int nthread, bool debug);
RcppExport SEXP _ggdmc_density_norm_gpu(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP nsimSEXP, SEXP bwSEXP, SEXP gpuidSEXP, SEXP nthreadSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type gpuid(gpuidSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nthread(nthreadSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(density_norm_gpu(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, nsim, bw, gpuid, nthread, debug));
    return rcpp_result_gen;
END_RCPP
}
// density_plba1
arma::vec density_plba1(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, unsigned int nsim, double bw, unsigned int ncore, bool debug);
RcppExport SEXP _ggdmc_density_plba1(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP nsimSEXP, SEXP bwSEXP, SEXP ncoreSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(density_plba1(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, nsim, bw, ncore, debug));
    return rcpp_result_gen;
END_RCPP
}
// density_plba0_gpu
arma::vec density_plba0_gpu(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, unsigned int nsim, double bw, unsigned int ncore, unsigned int gpuid, unsigned int nthread, bool debug);
RcppExport SEXP _ggdmc_density_plba0_gpu(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP nsimSEXP, SEXP bwSEXP, SEXP ncoreSEXP, SEXP gpuidSEXP, SEXP nthreadSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type gpuid(gpuidSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nthread(nthreadSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(density_plba0_gpu(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, nsim, bw, ncore, gpuid, nthread, debug));
    return rcpp_result_gen;
END_RCPP
}
// density_plba1_gpu
arma::vec density_plba1_gpu(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, unsigned int nsim, double bw, unsigned int ncore, unsigned int gpuid, unsigned int nthread, bool debug);
RcppExport SEXP _ggdmc_density_plba1_gpu(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP nsimSEXP, SEXP bwSEXP, SEXP ncoreSEXP, SEXP gpuidSEXP, SEXP nthreadSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type gpuid(gpuidSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nthread(nthreadSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(density_plba1_gpu(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, nsim, bw, ncore, gpuid, nthread, debug));
    return rcpp_result_gen;
END_RCPP
}
// sumloglike
double sumloglike(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, bool posdrift, unsigned int nsim, double bw, unsigned int ncore, unsigned int gpuid, bool debug);
RcppExport SEXP _ggdmc_sumloglike(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP posdriftSEXP, SEXP nsimSEXP, SEXP bwSEXP, SEXP ncoreSEXP, SEXP gpuidSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type gpuid(gpuidSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(sumloglike(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, posdrift, nsim, bw, ncore, gpuid, debug));
    return rcpp_result_gen;
END_RCPP
}
// profile_rd
NumericVector profile_rd(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, std::string pname, arma::vec ps);
RcppExport SEXP _ggdmc_profile_rd(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP pnameSEXP, SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(profile_rd(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, pname, ps));
    return rcpp_result_gen;
END_RCPP
}
// profile_norm
NumericVector profile_norm(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, std::string pname, arma::vec ps, bool posdrift);
RcppExport SEXP _ggdmc_profile_norm(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP pnameSEXP, SEXP psSEXP, SEXP posdriftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    rcpp_result_gen = Rcpp::wrap(profile_norm(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, pname, ps, posdrift));
    return rcpp_result_gen;
END_RCPP
}
// profile_norm_pda
NumericVector profile_norm_pda(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, std::string pname, arma::vec ps, int nsim, double bw);
RcppExport SEXP _ggdmc_profile_norm_pda(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP pnameSEXP, SEXP psSEXP, SEXP nsimSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(profile_norm_pda(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, pname, ps, nsim, bw));
    return rcpp_result_gen;
END_RCPP
}
// profile_cnorm_pda
NumericVector profile_cnorm_pda(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, std::string pname, arma::vec ps, int nsim, double bw);
RcppExport SEXP _ggdmc_profile_cnorm_pda(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP pnameSEXP, SEXP psSEXP, SEXP nsimSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(profile_cnorm_pda(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, pname, ps, nsim, bw));
    return rcpp_result_gen;
END_RCPP
}
// profile_norm_gpu
NumericVector profile_norm_gpu(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, std::string pname, arma::vec ps, int nsim, double bw);
RcppExport SEXP _ggdmc_profile_norm_gpu(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP pnameSEXP, SEXP psSEXP, SEXP nsimSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(profile_norm_gpu(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, pname, ps, nsim, bw));
    return rcpp_result_gen;
END_RCPP
}
// profile_plba1
NumericVector profile_plba1(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, std::string pname, arma::vec ps, int nsim, double bw);
RcppExport SEXP _ggdmc_profile_plba1(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP pnameSEXP, SEXP psSEXP, SEXP nsimSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(profile_plba1(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, pname, ps, nsim, bw));
    return rcpp_result_gen;
END_RCPP
}
// profile_plba1_gpu
NumericVector profile_plba1_gpu(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, std::string pname, arma::vec ps, int nsim, double bw, int gpuid, int nthread, bool debug);
RcppExport SEXP _ggdmc_profile_plba1_gpu(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP pnameSEXP, SEXP psSEXP, SEXP nsimSEXP, SEXP bwSEXP, SEXP gpuidSEXP, SEXP nthreadSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type gpuid(gpuidSEXP);
    Rcpp::traits::input_parameter< int >::type nthread(nthreadSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(profile_plba1_gpu(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, pname, ps, nsim, bw, gpuid, nthread, debug));
    return rcpp_result_gen;
END_RCPP
}
// profile_plba0_gpu
NumericVector profile_plba0_gpu(arma::vec pVec, std::vector<std::string> pnames, arma::vec allpar, std::vector<std::string> parnames, arma::ucube model, std::string type, std::vector<std::string> dim1, std::vector<std::string> dim2, std::vector<std::string> dim3, arma::umat n1idx, arma::uvec ise, arma::umat cellidx, arma::vec RT, arma::uvec matchcell, arma::uvec isr1, std::string pname, arma::vec ps, int nsim, double bw, int gpuid, int nthread, bool debug);
RcppExport SEXP _ggdmc_profile_plba0_gpu(SEXP pVecSEXP, SEXP pnamesSEXP, SEXP allparSEXP, SEXP parnamesSEXP, SEXP modelSEXP, SEXP typeSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP dim3SEXP, SEXP n1idxSEXP, SEXP iseSEXP, SEXP cellidxSEXP, SEXP RTSEXP, SEXP matchcellSEXP, SEXP isr1SEXP, SEXP pnameSEXP, SEXP psSEXP, SEXP nsimSEXP, SEXP bwSEXP, SEXP gpuidSEXP, SEXP nthreadSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pnames(pnamesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type allpar(allparSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dim3(dim3SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type n1idx(n1idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ise(iseSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type cellidx(cellidxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type matchcell(matchcellSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type isr1(isr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type gpuid(gpuidSEXP);
    Rcpp::traits::input_parameter< int >::type nthread(nthreadSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(profile_plba0_gpu(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3, n1idx, ise, cellidx, RT, matchcell, isr1, pname, ps, nsim, bw, gpuid, nthread, debug));
    return rcpp_result_gen;
END_RCPP
}
// GetTheta0
arma::cube GetTheta0(List samples);
RcppExport SEXP _ggdmc_GetTheta0(SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTheta0(samples));
    return rcpp_result_gen;
END_RCPP
}
// sumloghprior
double sumloghprior(arma::vec location, arma::vec scale, std::vector<std::string> ldists, std::vector<std::string> sdists, arma::vec lp1, arma::vec sp1, arma::vec lp2, arma::vec sp2, arma::vec llower, arma::vec slower, arma::vec lupper, arma::vec supper, arma::uvec llog, arma::uvec slog);
RcppExport SEXP _ggdmc_sumloghprior(SEXP locationSEXP, SEXP scaleSEXP, SEXP ldistsSEXP, SEXP sdistsSEXP, SEXP lp1SEXP, SEXP sp1SEXP, SEXP lp2SEXP, SEXP sp2SEXP, SEXP llowerSEXP, SEXP slowerSEXP, SEXP lupperSEXP, SEXP supperSEXP, SEXP llogSEXP, SEXP slogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type location(locationSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type ldists(ldistsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sdists(sdistsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lp1(lp1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sp1(sp1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lp2(lp2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sp2(sp2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type llower(llowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type slower(slowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lupper(lupperSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type supper(supperSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type llog(llogSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type slog(slogSEXP);
    rcpp_result_gen = Rcpp::wrap(sumloghprior(location, scale, ldists, sdists, lp1, sp1, lp2, sp2, llower, slower, lupper, supper, llog, slog));
    return rcpp_result_gen;
END_RCPP
}
// sumloghlike
double sumloghlike(arma::mat thetak, std::vector<std::string> dists, arma::vec p1, arma::vec p2, arma::vec lower, arma::vec upper, arma::uvec islog);
RcppExport SEXP _ggdmc_sumloghlike(SEXP thetakSEXP, SEXP distsSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP islogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type thetak(thetakSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type islog(islogSEXP);
    rcpp_result_gen = Rcpp::wrap(sumloghlike(thetak, dists, p1, p2, lower, upper, islog));
    return rcpp_result_gen;
END_RCPP
}
// StartIteration
void StartIteration(List samples);
RcppExport SEXP _ggdmc_StartIteration(SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    StartIteration(samples);
    return R_NilValue;
END_RCPP
}
// init_new
List init_new(unsigned int nmc, List pprior, List data, double rp, unsigned int thin, unsigned int nchain, unsigned int ncore, bool debug);
RcppExport SEXP _ggdmc_init_new(SEXP nmcSEXP, SEXP ppriorSEXP, SEXP dataSEXP, SEXP rpSEXP, SEXP thinSEXP, SEXP nchainSEXP, SEXP ncoreSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< List >::type pprior(ppriorSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nchain(nchainSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(init_new(nmc, pprior, data, rp, thin, nchain, ncore, debug));
    return rcpp_result_gen;
END_RCPP
}
// init_old
List init_old(unsigned int nmc, List samples, double rp, unsigned int thin);
RcppExport SEXP _ggdmc_init_old(SEXP nmcSEXP, SEXP samplesSEXP, SEXP rpSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(init_old(nmc, samples, rp, thin));
    return rcpp_result_gen;
END_RCPP
}
// init_add
List init_add(unsigned int nmc, List samples, double rp, unsigned int thin);
RcppExport SEXP _ggdmc_init_add(SEXP nmcSEXP, SEXP samplesSEXP, SEXP rpSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(init_add(nmc, samples, rp, thin));
    return rcpp_result_gen;
END_RCPP
}
// init_newnonhier
List init_newnonhier(unsigned int nmc, List data, List pprior, double rp, unsigned int thin, unsigned int nchain);
RcppExport SEXP _ggdmc_init_newnonhier(SEXP nmcSEXP, SEXP dataSEXP, SEXP ppriorSEXP, SEXP rpSEXP, SEXP thinSEXP, SEXP nchainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type pprior(ppriorSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nchain(nchainSEXP);
    rcpp_result_gen = Rcpp::wrap(init_newnonhier(nmc, data, pprior, rp, thin, nchain));
    return rcpp_result_gen;
END_RCPP
}
// init_oldnonhier
List init_oldnonhier(unsigned int nmc, List samples, double rp, unsigned int thin);
RcppExport SEXP _ggdmc_init_oldnonhier(SEXP nmcSEXP, SEXP samplesSEXP, SEXP rpSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(init_oldnonhier(nmc, samples, rp, thin));
    return rcpp_result_gen;
END_RCPP
}
// init_addnonhier
List init_addnonhier(unsigned int nmc, List samples, double rp, unsigned int thin);
RcppExport SEXP _ggdmc_init_addnonhier(SEXP nmcSEXP, SEXP samplesSEXP, SEXP rpSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(init_addnonhier(nmc, samples, rp, thin));
    return rcpp_result_gen;
END_RCPP
}
// init_newhier
List init_newhier(unsigned int nmc, List data, List pprior, List ppprior, double rp, unsigned int thin, unsigned int nchain);
RcppExport SEXP _ggdmc_init_newhier(SEXP nmcSEXP, SEXP dataSEXP, SEXP ppriorSEXP, SEXP pppriorSEXP, SEXP rpSEXP, SEXP thinSEXP, SEXP nchainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type pprior(ppriorSEXP);
    Rcpp::traits::input_parameter< List >::type ppprior(pppriorSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nchain(nchainSEXP);
    rcpp_result_gen = Rcpp::wrap(init_newhier(nmc, data, pprior, ppprior, rp, thin, nchain));
    return rcpp_result_gen;
END_RCPP
}
// init_oldhier
List init_oldhier(unsigned int nmc, List samples, double rp, unsigned int thin);
RcppExport SEXP _ggdmc_init_oldhier(SEXP nmcSEXP, SEXP samplesSEXP, SEXP rpSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(init_oldhier(nmc, samples, rp, thin));
    return rcpp_result_gen;
END_RCPP
}
// init_addhier
List init_addhier(unsigned int nmc, List samples, double rp, unsigned int thin);
RcppExport SEXP _ggdmc_init_addhier(SEXP nmcSEXP, SEXP samplesSEXP, SEXP rpSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< double >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(init_addhier(nmc, samples, rp, thin));
    return rcpp_result_gen;
END_RCPP
}
// rlnr
arma::mat rlnr(unsigned int n, arma::vec meanlog, arma::vec sdlog, arma::vec t0, double st0);
RcppExport SEXP _ggdmc_rlnr(SEXP nSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP, SEXP t0SEXP, SEXP st0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sdlog(sdlogSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type st0(st0SEXP);
    rcpp_result_gen = Rcpp::wrap(rlnr(n, meanlog, sdlog, t0, st0));
    return rcpp_result_gen;
END_RCPP
}
// rlnrDF
DataFrame rlnrDF(unsigned int n, arma::vec meanlog, arma::vec sdlog, arma::vec t0, double st0);
RcppExport SEXP _ggdmc_rlnrDF(SEXP nSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP, SEXP t0SEXP, SEXP st0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sdlog(sdlogSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type st0(st0SEXP);
    rcpp_result_gen = Rcpp::wrap(rlnrDF(n, meanlog, sdlog, t0, st0));
    return rcpp_result_gen;
END_RCPP
}
// n1PDFfixedt0_lnr1
arma::vec n1PDFfixedt0_lnr1(arma::mat x, arma::vec meanlog, arma::vec sdlog);
RcppExport SEXP _ggdmc_n1PDFfixedt0_lnr1(SEXP xSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sdlog(sdlogSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDFfixedt0_lnr1(x, meanlog, sdlog));
    return rcpp_result_gen;
END_RCPP
}
// n1PDFfixedt0_lnr2
arma::vec n1PDFfixedt0_lnr2(arma::mat x, arma::mat meanlog, arma::mat sdlog);
RcppExport SEXP _ggdmc_n1PDFfixedt0_lnr2(SEXP xSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sdlog(sdlogSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDFfixedt0_lnr2(x, meanlog, sdlog));
    return rcpp_result_gen;
END_RCPP
}
// spdf
arma::vec spdf(arma::vec x, arma::vec RT, unsigned int n, double h_in, bool debug);
RcppExport SEXP _ggdmc_spdf(SEXP xSEXP, SEXP RTSEXP, SEXP nSEXP, SEXP h_inSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type h_in(h_inSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(spdf(x, RT, n, h_in, debug));
    return rcpp_result_gen;
END_RCPP
}
// rplba0
arma::mat rplba0(unsigned int n, arma::vec A, arma::vec b, double t0, arma::vec mean_v, arma::vec mean_w, arma::vec sd_v, double rD, double swt, int ncore, bool debug);
RcppExport SEXP _ggdmc_rplba0(SEXP nSEXP, SEXP ASEXP, SEXP bSEXP, SEXP t0SEXP, SEXP mean_vSEXP, SEXP mean_wSEXP, SEXP sd_vSEXP, SEXP rDSEXP, SEXP swtSEXP, SEXP ncoreSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_w(mean_wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type rD(rDSEXP);
    Rcpp::traits::input_parameter< double >::type swt(swtSEXP);
    Rcpp::traits::input_parameter< int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rplba0(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt, ncore, debug));
    return rcpp_result_gen;
END_RCPP
}
// rplba1
arma::mat rplba1(unsigned int n, arma::vec A, arma::vec b, double t0, arma::vec mean_v, arma::vec mean_w, arma::vec sd_v, double rD, double swt, unsigned int ncore, bool debug);
RcppExport SEXP _ggdmc_rplba1(SEXP nSEXP, SEXP ASEXP, SEXP bSEXP, SEXP t0SEXP, SEXP mean_vSEXP, SEXP mean_wSEXP, SEXP sd_vSEXP, SEXP rDSEXP, SEXP swtSEXP, SEXP ncoreSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_w(mean_wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type rD(rDSEXP);
    Rcpp::traits::input_parameter< double >::type swt(swtSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rplba1(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt, ncore, debug));
    return rcpp_result_gen;
END_RCPP
}
// rplba2
arma::mat rplba2(unsigned int n, arma::vec A, arma::vec b, double t0, arma::vec mean_v, arma::vec mean_w, arma::vec sd_v, arma::vec sd_w, double rD, double swt, unsigned int ncore, bool debug);
RcppExport SEXP _ggdmc_rplba2(SEXP nSEXP, SEXP ASEXP, SEXP bSEXP, SEXP t0SEXP, SEXP mean_vSEXP, SEXP mean_wSEXP, SEXP sd_vSEXP, SEXP sd_wSEXP, SEXP rDSEXP, SEXP swtSEXP, SEXP ncoreSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_w(mean_wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_w(sd_wSEXP);
    Rcpp::traits::input_parameter< double >::type rD(rDSEXP);
    Rcpp::traits::input_parameter< double >::type swt(swtSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rplba2(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt, ncore, debug));
    return rcpp_result_gen;
END_RCPP
}
// rplba3
arma::mat rplba3(unsigned int n, arma::vec A, arma::vec B, arma::vec C, arma::vec mean_v, arma::vec mean_w, arma::vec sd_v, arma::vec sd_w, double rD, double tD, double swt, double t0);
RcppExport SEXP _ggdmc_rplba3(SEXP nSEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP mean_vSEXP, SEXP mean_wSEXP, SEXP sd_vSEXP, SEXP sd_wSEXP, SEXP rDSEXP, SEXP tDSEXP, SEXP swtSEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_w(mean_wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_w(sd_wSEXP);
    Rcpp::traits::input_parameter< double >::type rD(rDSEXP);
    Rcpp::traits::input_parameter< double >::type tD(tDSEXP);
    Rcpp::traits::input_parameter< double >::type swt(swtSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    rcpp_result_gen = Rcpp::wrap(rplba3(n, A, B, C, mean_v, mean_w, sd_v, sd_w, rD, tD, swt, t0));
    return rcpp_result_gen;
END_RCPP
}
// n1PDF_plba1
arma::vec n1PDF_plba1(arma::vec x, arma::vec A, arma::vec b, arma::vec mean_v, arma::vec sd_v, double t0, arma::vec mean_w, double rD, double swt, unsigned int n, double h, unsigned int ncore, bool debug);
RcppExport SEXP _ggdmc_n1PDF_plba1(SEXP xSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP mean_wSEXP, SEXP rDSEXP, SEXP swtSEXP, SEXP nSEXP, SEXP hSEXP, SEXP ncoreSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_w(mean_wSEXP);
    Rcpp::traits::input_parameter< double >::type rD(rDSEXP);
    Rcpp::traits::input_parameter< double >::type swt(swtSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDF_plba1(x, A, b, mean_v, sd_v, t0, mean_w, rD, swt, n, h, ncore, debug));
    return rcpp_result_gen;
END_RCPP
}
// n1PDF_plba2
arma::vec n1PDF_plba2(arma::vec x, arma::vec A, arma::vec b, arma::vec mean_v, arma::vec sd_v, double t0, arma::vec mean_w, arma::vec sd_w, double rD, double swt, unsigned int n, double h, unsigned int ncore, bool debug);
RcppExport SEXP _ggdmc_n1PDF_plba2(SEXP xSEXP, SEXP ASEXP, SEXP bSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP t0SEXP, SEXP mean_wSEXP, SEXP sd_wSEXP, SEXP rDSEXP, SEXP swtSEXP, SEXP nSEXP, SEXP hSEXP, SEXP ncoreSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_w(mean_wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_w(sd_wSEXP);
    Rcpp::traits::input_parameter< double >::type rD(rDSEXP);
    Rcpp::traits::input_parameter< double >::type swt(swtSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDF_plba2(x, A, b, mean_v, sd_v, t0, mean_w, sd_w, rD, swt, n, h, ncore, debug));
    return rcpp_result_gen;
END_RCPP
}
// n1PDF_plba3
arma::vec n1PDF_plba3(arma::vec x, unsigned int n, arma::vec A, arma::vec B, arma::vec C, arma::vec mean_v, arma::vec sd_v, arma::vec mean_w, arma::vec sd_w, double rD, double tD, double swt, double t0, double h);
RcppExport SEXP _ggdmc_n1PDF_plba3(SEXP xSEXP, SEXP nSEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP mean_vSEXP, SEXP sd_vSEXP, SEXP mean_wSEXP, SEXP sd_wSEXP, SEXP rDSEXP, SEXP tDSEXP, SEXP swtSEXP, SEXP t0SEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_v(mean_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_v(sd_vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_w(mean_wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd_w(sd_wSEXP);
    Rcpp::traits::input_parameter< double >::type rD(rDSEXP);
    Rcpp::traits::input_parameter< double >::type tD(tDSEXP);
    Rcpp::traits::input_parameter< double >::type swt(swtSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDF_plba3(x, n, A, B, C, mean_v, sd_v, mean_w, sd_w, rD, tD, swt, t0, h));
    return rcpp_result_gen;
END_RCPP
}
// dprior_
arma::vec dprior_(arma::vec pvec, std::vector<std::string> dists, arma::vec p1, arma::vec p2, arma::vec lower, arma::vec upper, arma::uvec islog);
RcppExport SEXP _ggdmc_dprior_(SEXP pvecSEXP, SEXP distsSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP islogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pvec(pvecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type islog(islogSEXP);
    rcpp_result_gen = Rcpp::wrap(dprior_(pvec, dists, p1, p2, lower, upper, islog));
    return rcpp_result_gen;
END_RCPP
}
// sumlogprior
double sumlogprior(arma::vec pvec, std::vector<std::string> dists, arma::vec p1, arma::vec p2, arma::vec lower, arma::vec upper, arma::uvec islog);
RcppExport SEXP _ggdmc_sumlogprior(SEXP pvecSEXP, SEXP distsSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP islogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pvec(pvecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type islog(islogSEXP);
    rcpp_result_gen = Rcpp::wrap(sumlogprior(pvec, dists, p1, p2, lower, upper, islog));
    return rcpp_result_gen;
END_RCPP
}
// dprior
NumericVector dprior(NumericVector pvec, List prior);
RcppExport SEXP _ggdmc_dprior(SEXP pvecSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pvec(pvecSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(dprior(pvec, prior));
    return rcpp_result_gen;
END_RCPP
}
// rprior_scalar
NumericVector rprior_scalar(List prior);
RcppExport SEXP _ggdmc_rprior_scalar(SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(rprior_scalar(prior));
    return rcpp_result_gen;
END_RCPP
}
// rprior_mat
NumericMatrix rprior_mat(List prior, unsigned int n);
RcppExport SEXP _ggdmc_rprior_mat(SEXP priorSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rprior_mat(prior, n));
    return rcpp_result_gen;
END_RCPP
}
// rprior_vec
arma::vec rprior_vec(std::vector<std::string> dists, arma::vec p1, arma::vec p2, arma::vec lower, arma::vec upper);
RcppExport SEXP _ggdmc_rprior_vec(SEXP distsSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rprior_vec(dists, p1, p2, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// rprior
arma::mat rprior(unsigned int n, std::vector<std::string> dists, arma::vec p1, arma::vec p2, arma::vec lower, arma::vec upper);
RcppExport SEXP _ggdmc_rprior(SEXP nSEXP, SEXP distsSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rprior(n, dists, p1, p2, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// sumlogpriorNV
double sumlogpriorNV(arma::vec pvec, List prior);
RcppExport SEXP _ggdmc_sumlogpriorNV(SEXP pvecSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pvec(pvecSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(sumlogpriorNV(pvec, prior));
    return rcpp_result_gen;
END_RCPP
}
// GetGamma
arma::vec GetGamma(unsigned int npar, double gammamult, bool hyper);
RcppExport SEXP _ggdmc_GetGamma(SEXP nparSEXP, SEXP gammamultSEXP, SEXP hyperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type npar(nparSEXP);
    Rcpp::traits::input_parameter< double >::type gammamult(gammamultSEXP);
    Rcpp::traits::input_parameter< bool >::type hyper(hyperSEXP);
    rcpp_result_gen = Rcpp::wrap(GetGamma(npar, gammamult, hyper));
    return rcpp_result_gen;
END_RCPP
}
// PickChains
arma::uvec PickChains(unsigned int k, unsigned int nchain, arma::uvec chains);
RcppExport SEXP _ggdmc_PickChains(SEXP kSEXP, SEXP nchainSEXP, SEXP chainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nchain(nchainSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type chains(chainsSEXP);
    rcpp_result_gen = Rcpp::wrap(PickChains(k, nchain, chains));
    return rcpp_result_gen;
END_RCPP
}
// GetSubchains
arma::uvec GetSubchains(unsigned int nchain);
RcppExport SEXP _ggdmc_GetSubchains(SEXP nchainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nchain(nchainSEXP);
    rcpp_result_gen = Rcpp::wrap(GetSubchains(nchain));
    return rcpp_result_gen;
END_RCPP
}
// SelectEmigrants
arma::uvec SelectEmigrants(unsigned int ngroup, unsigned int k);
RcppExport SEXP _ggdmc_SelectEmigrants(SEXP ngroupSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(SelectEmigrants(ngroup, k));
    return rcpp_result_gen;
END_RCPP
}
// run_dgmc
List run_dgmc(List samples, arma::uvec force, unsigned int report, double pm, double qm, double gammamult, unsigned int ncore, unsigned int ngroup);
RcppExport SEXP _ggdmc_run_dgmc(SEXP samplesSEXP, SEXP forceSEXP, SEXP reportSEXP, SEXP pmSEXP, SEXP qmSEXP, SEXP gammamultSEXP, SEXP ncoreSEXP, SEXP ngroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type force(forceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type report(reportSEXP);
    Rcpp::traits::input_parameter< double >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< double >::type qm(qmSEXP);
    Rcpp::traits::input_parameter< double >::type gammamult(gammamultSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ngroup(ngroupSEXP);
    rcpp_result_gen = Rcpp::wrap(run_dgmc(samples, force, report, pm, qm, gammamult, ncore, ngroup));
    return rcpp_result_gen;
END_RCPP
}
// run_dmc
List run_dmc(List samples, arma::uvec force, unsigned int report, double pm, double gammamult, unsigned int ncore, bool slice);
RcppExport SEXP _ggdmc_run_dmc(SEXP samplesSEXP, SEXP forceSEXP, SEXP reportSEXP, SEXP pmSEXP, SEXP gammamultSEXP, SEXP ncoreSEXP, SEXP sliceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type force(forceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type report(reportSEXP);
    Rcpp::traits::input_parameter< double >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< double >::type gammamult(gammamultSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< bool >::type slice(sliceSEXP);
    rcpp_result_gen = Rcpp::wrap(run_dmc(samples, force, report, pm, gammamult, ncore, slice));
    return rcpp_result_gen;
END_RCPP
}
// run_hyper_dmc
List run_hyper_dmc(List samples, unsigned int report, double pm, double hpm, double gammamult, unsigned int ncore, bool debug);
RcppExport SEXP _ggdmc_run_hyper_dmc(SEXP samplesSEXP, SEXP reportSEXP, SEXP pmSEXP, SEXP hpmSEXP, SEXP gammamultSEXP, SEXP ncoreSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type report(reportSEXP);
    Rcpp::traits::input_parameter< double >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< double >::type hpm(hpmSEXP);
    Rcpp::traits::input_parameter< double >::type gammamult(gammamultSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(run_hyper_dmc(samples, report, pm, hpm, gammamult, ncore, debug));
    return rcpp_result_gen;
END_RCPP
}
// run_hyper_dgmc
List run_hyper_dgmc(List samples, unsigned int report, double pm, double hpm, double qm, double hqm, double gammamult, unsigned int ngroup, unsigned int ncore);
RcppExport SEXP _ggdmc_run_hyper_dgmc(SEXP samplesSEXP, SEXP reportSEXP, SEXP pmSEXP, SEXP hpmSEXP, SEXP qmSEXP, SEXP hqmSEXP, SEXP gammamultSEXP, SEXP ngroupSEXP, SEXP ncoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type report(reportSEXP);
    Rcpp::traits::input_parameter< double >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< double >::type hpm(hpmSEXP);
    Rcpp::traits::input_parameter< double >::type qm(qmSEXP);
    Rcpp::traits::input_parameter< double >::type hqm(hqmSEXP);
    Rcpp::traits::input_parameter< double >::type gammamult(gammamultSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncore(ncoreSEXP);
    rcpp_result_gen = Rcpp::wrap(run_hyper_dgmc(samples, report, pm, hpm, qm, hqm, gammamult, ngroup, ncore));
    return rcpp_result_gen;
END_RCPP
}
// rtn_scalar
double rtn_scalar(double mean, double sd, double l, double u);
RcppExport SEXP _ggdmc_rtn_scalar(SEXP meanSEXP, SEXP sdSEXP, SEXP lSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(rtn_scalar(mean, sd, l, u));
    return rcpp_result_gen;
END_RCPP
}
// dtnorm
arma::vec dtnorm(arma::vec x, double mean, double sd, double lower, double upper, bool log);
RcppExport SEXP _ggdmc_dtnorm(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dtnorm(x, mean, sd, lower, upper, log));
    return rcpp_result_gen;
END_RCPP
}
// rtnorm
arma::vec rtnorm(unsigned int n, double mean, double sd, double lower, double upper);
RcppExport SEXP _ggdmc_rtnorm(SEXP nSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtnorm(n, mean, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// ptnorm
arma::vec ptnorm(arma::vec q, double mean, double sd, double lower, double upper, bool lt, bool log);
RcppExport SEXP _ggdmc_ptnorm(SEXP qSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP ltSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(ptnorm(q, mean, sd, lower, upper, lt, log));
    return rcpp_result_gen;
END_RCPP
}
// GetConstIdx
arma::umat GetConstIdx(List ppprior);
RcppExport SEXP _ggdmc_GetConstIdx(SEXP pppriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ppprior(pppriorSEXP);
    rcpp_result_gen = Rcpp::wrap(GetConstIdx(ppprior));
    return rcpp_result_gen;
END_RCPP
}
// MatchPnames
LogicalVector MatchPnames(List samples);
RcppExport SEXP _ggdmc_MatchPnames(SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(MatchPnames(samples));
    return rcpp_result_gen;
END_RCPP
}
// MatchPPPriorName
LogicalVector MatchPPPriorName(List ppprior);
RcppExport SEXP _ggdmc_MatchPPPriorName(SEXP pppriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ppprior(pppriorSEXP);
    rcpp_result_gen = Rcpp::wrap(MatchPPPriorName(ppprior));
    return rcpp_result_gen;
END_RCPP
}
// CheckPnames
void CheckPnames(List samples);
RcppExport SEXP _ggdmc_CheckPnames(SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    CheckPnames(samples);
    return R_NilValue;
END_RCPP
}
// CheckHyperPnames
void CheckHyperPnames(List samples);
RcppExport SEXP _ggdmc_CheckHyperPnames(SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type samples(samplesSEXP);
    CheckHyperPnames(samples);
    return R_NilValue;
END_RCPP
}
// cellIdx2Mat
arma::umat cellIdx2Mat(List data);
RcppExport SEXP _ggdmc_cellIdx2Mat(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(cellIdx2Mat(data));
    return rcpp_result_gen;
END_RCPP
}
// ac_
arma::mat ac_(arma::vec x, unsigned int nlag);
RcppExport SEXP _ggdmc_ac_(SEXP xSEXP, SEXP nlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlag(nlagSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_(x, nlag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ggdmc_pnormP", (DL_FUNC) &_ggdmc_pnormP, 5},
    {"_ggdmc_dnormP", (DL_FUNC) &_ggdmc_dnormP, 4},
    {"_ggdmc_remove_t0", (DL_FUNC) &_ggdmc_remove_t0, 2},
    {"_ggdmc_GetTime2Finish", (DL_FUNC) &_ggdmc_GetTime2Finish, 7},
    {"_ggdmc_fptcdf", (DL_FUNC) &_ggdmc_fptcdf, 7},
    {"_ggdmc_fptpdf", (DL_FUNC) &_ggdmc_fptpdf, 7},
    {"_ggdmc_n1PDFfixedt0", (DL_FUNC) &_ggdmc_n1PDFfixedt0, 7},
    {"_ggdmc_n1PDFfixedt0_pda", (DL_FUNC) &_ggdmc_n1PDFfixedt0_pda, 9},
    {"_ggdmc_n1PDF_cnorm", (DL_FUNC) &_ggdmc_n1PDF_cnorm, 11},
    {"_ggdmc_n1PDF_gpu", (DL_FUNC) &_ggdmc_n1PDF_gpu, 11},
    {"_ggdmc_n1PDF_plba0_gpu", (DL_FUNC) &_ggdmc_n1PDF_plba0_gpu, 14},
    {"_ggdmc_n1PDF_plba1_gpu", (DL_FUNC) &_ggdmc_n1PDF_plba1_gpu, 14},
    {"_ggdmc_make_r", (DL_FUNC) &_ggdmc_make_r, 7},
    {"_ggdmc_make_v", (DL_FUNC) &_ggdmc_make_v, 4},
    {"_ggdmc_rlba_norm", (DL_FUNC) &_ggdmc_rlba_norm, 10},
    {"_ggdmc_make_sigma", (DL_FUNC) &_ggdmc_make_sigma, 3},
    {"_ggdmc_g_minus", (DL_FUNC) &_ggdmc_g_minus, 1},
    {"_ggdmc_g_plus", (DL_FUNC) &_ggdmc_g_plus, 1},
    {"_ggdmc_FlipResponse_norm", (DL_FUNC) &_ggdmc_FlipResponse_norm, 6},
    {"_ggdmc_checkddm2", (DL_FUNC) &_ggdmc_checkddm2, 1},
    {"_ggdmc_p_df", (DL_FUNC) &_ggdmc_p_df, 13},
    {"_ggdmc_getbounds", (DL_FUNC) &_ggdmc_getbounds, 1},
    {"_ggdmc_density_rd", (DL_FUNC) &_ggdmc_density_rd, 16},
    {"_ggdmc_density_norm", (DL_FUNC) &_ggdmc_density_norm, 16},
    {"_ggdmc_density_cnorm_pda", (DL_FUNC) &_ggdmc_density_cnorm_pda, 18},
    {"_ggdmc_density_norm_pda", (DL_FUNC) &_ggdmc_density_norm_pda, 18},
    {"_ggdmc_density_norm_gpu", (DL_FUNC) &_ggdmc_density_norm_gpu, 20},
    {"_ggdmc_density_plba1", (DL_FUNC) &_ggdmc_density_plba1, 19},
    {"_ggdmc_density_plba0_gpu", (DL_FUNC) &_ggdmc_density_plba0_gpu, 21},
    {"_ggdmc_density_plba1_gpu", (DL_FUNC) &_ggdmc_density_plba1_gpu, 21},
    {"_ggdmc_sumloglike", (DL_FUNC) &_ggdmc_sumloglike, 21},
    {"_ggdmc_profile_rd", (DL_FUNC) &_ggdmc_profile_rd, 17},
    {"_ggdmc_profile_norm", (DL_FUNC) &_ggdmc_profile_norm, 18},
    {"_ggdmc_profile_norm_pda", (DL_FUNC) &_ggdmc_profile_norm_pda, 19},
    {"_ggdmc_profile_cnorm_pda", (DL_FUNC) &_ggdmc_profile_cnorm_pda, 19},
    {"_ggdmc_profile_norm_gpu", (DL_FUNC) &_ggdmc_profile_norm_gpu, 19},
    {"_ggdmc_profile_plba1", (DL_FUNC) &_ggdmc_profile_plba1, 19},
    {"_ggdmc_profile_plba1_gpu", (DL_FUNC) &_ggdmc_profile_plba1_gpu, 22},
    {"_ggdmc_profile_plba0_gpu", (DL_FUNC) &_ggdmc_profile_plba0_gpu, 22},
    {"_ggdmc_GetTheta0", (DL_FUNC) &_ggdmc_GetTheta0, 1},
    {"_ggdmc_sumloghprior", (DL_FUNC) &_ggdmc_sumloghprior, 14},
    {"_ggdmc_sumloghlike", (DL_FUNC) &_ggdmc_sumloghlike, 7},
    {"_ggdmc_StartIteration", (DL_FUNC) &_ggdmc_StartIteration, 1},
    {"_ggdmc_init_new", (DL_FUNC) &_ggdmc_init_new, 8},
    {"_ggdmc_init_old", (DL_FUNC) &_ggdmc_init_old, 4},
    {"_ggdmc_init_add", (DL_FUNC) &_ggdmc_init_add, 4},
    {"_ggdmc_init_newnonhier", (DL_FUNC) &_ggdmc_init_newnonhier, 6},
    {"_ggdmc_init_oldnonhier", (DL_FUNC) &_ggdmc_init_oldnonhier, 4},
    {"_ggdmc_init_addnonhier", (DL_FUNC) &_ggdmc_init_addnonhier, 4},
    {"_ggdmc_init_newhier", (DL_FUNC) &_ggdmc_init_newhier, 7},
    {"_ggdmc_init_oldhier", (DL_FUNC) &_ggdmc_init_oldhier, 4},
    {"_ggdmc_init_addhier", (DL_FUNC) &_ggdmc_init_addhier, 4},
    {"_ggdmc_rlnr", (DL_FUNC) &_ggdmc_rlnr, 5},
    {"_ggdmc_rlnrDF", (DL_FUNC) &_ggdmc_rlnrDF, 5},
    {"_ggdmc_n1PDFfixedt0_lnr1", (DL_FUNC) &_ggdmc_n1PDFfixedt0_lnr1, 3},
    {"_ggdmc_n1PDFfixedt0_lnr2", (DL_FUNC) &_ggdmc_n1PDFfixedt0_lnr2, 3},
    {"_ggdmc_spdf", (DL_FUNC) &_ggdmc_spdf, 5},
    {"_ggdmc_rplba0", (DL_FUNC) &_ggdmc_rplba0, 11},
    {"_ggdmc_rplba1", (DL_FUNC) &_ggdmc_rplba1, 11},
    {"_ggdmc_rplba2", (DL_FUNC) &_ggdmc_rplba2, 12},
    {"_ggdmc_rplba3", (DL_FUNC) &_ggdmc_rplba3, 12},
    {"_ggdmc_n1PDF_plba1", (DL_FUNC) &_ggdmc_n1PDF_plba1, 13},
    {"_ggdmc_n1PDF_plba2", (DL_FUNC) &_ggdmc_n1PDF_plba2, 14},
    {"_ggdmc_n1PDF_plba3", (DL_FUNC) &_ggdmc_n1PDF_plba3, 14},
    {"_ggdmc_dprior_", (DL_FUNC) &_ggdmc_dprior_, 7},
    {"_ggdmc_sumlogprior", (DL_FUNC) &_ggdmc_sumlogprior, 7},
    {"_ggdmc_dprior", (DL_FUNC) &_ggdmc_dprior, 2},
    {"_ggdmc_rprior_scalar", (DL_FUNC) &_ggdmc_rprior_scalar, 1},
    {"_ggdmc_rprior_mat", (DL_FUNC) &_ggdmc_rprior_mat, 2},
    {"_ggdmc_rprior_vec", (DL_FUNC) &_ggdmc_rprior_vec, 5},
    {"_ggdmc_rprior", (DL_FUNC) &_ggdmc_rprior, 6},
    {"_ggdmc_sumlogpriorNV", (DL_FUNC) &_ggdmc_sumlogpriorNV, 2},
    {"_ggdmc_GetGamma", (DL_FUNC) &_ggdmc_GetGamma, 3},
    {"_ggdmc_PickChains", (DL_FUNC) &_ggdmc_PickChains, 3},
    {"_ggdmc_GetSubchains", (DL_FUNC) &_ggdmc_GetSubchains, 1},
    {"_ggdmc_SelectEmigrants", (DL_FUNC) &_ggdmc_SelectEmigrants, 2},
    {"_ggdmc_run_dgmc", (DL_FUNC) &_ggdmc_run_dgmc, 8},
    {"_ggdmc_run_dmc", (DL_FUNC) &_ggdmc_run_dmc, 7},
    {"_ggdmc_run_hyper_dmc", (DL_FUNC) &_ggdmc_run_hyper_dmc, 7},
    {"_ggdmc_run_hyper_dgmc", (DL_FUNC) &_ggdmc_run_hyper_dgmc, 9},
    {"_ggdmc_rtn_scalar", (DL_FUNC) &_ggdmc_rtn_scalar, 4},
    {"_ggdmc_dtnorm", (DL_FUNC) &_ggdmc_dtnorm, 6},
    {"_ggdmc_rtnorm", (DL_FUNC) &_ggdmc_rtnorm, 5},
    {"_ggdmc_ptnorm", (DL_FUNC) &_ggdmc_ptnorm, 7},
    {"_ggdmc_GetConstIdx", (DL_FUNC) &_ggdmc_GetConstIdx, 1},
    {"_ggdmc_MatchPnames", (DL_FUNC) &_ggdmc_MatchPnames, 1},
    {"_ggdmc_MatchPPPriorName", (DL_FUNC) &_ggdmc_MatchPPPriorName, 1},
    {"_ggdmc_CheckPnames", (DL_FUNC) &_ggdmc_CheckPnames, 1},
    {"_ggdmc_CheckHyperPnames", (DL_FUNC) &_ggdmc_CheckHyperPnames, 1},
    {"_ggdmc_cellIdx2Mat", (DL_FUNC) &_ggdmc_cellIdx2Mat, 1},
    {"_ggdmc_ac_", (DL_FUNC) &_ggdmc_ac_, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ggdmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
